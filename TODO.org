* TODO REST-calls, translate JSON.
  #+BEGIN_SRC scheme :tangle rest-calls.scm :shebang #!/usr/bin/env chicken-scheme
    (use
     srfi-1
     debug
     intarweb
     uri-common
     http-client
     medea
     matchable
     vector-lib
     defstruct
     )
    
    (include "my-factual-key.scm")
    
    (define (alist-delete/key key-deletandum alist)
      (delete (match-lambda ((key . value) (equal? key key-deletandum))) alist))
    
    (define (alist-partition/key key alist)
      (values (alist-ref key alist)
              (alist-delete key alist)))
    
    (define factual-key (make-parameter #f))
    
    (define (boolean->string boolean)
      (if boolean "true" "false"))
    
    (defstruct factual-datum
      name
      address
      locality
      region
      country
      postcode
      tel
      category
      latitude
      longitude
      status)
    
    (define (factual-read #!key
                          (table "places")
                          (limit 10)
                          (include-count #f)
                          (offset 0))
      (let-values
          (((data-metadata uri response)
            (with-input-from-request
             (parameterize ((form-urlencoded-separator "&"))
                           (update-uri (uri-reference "http://api.v3.factual.com")
                                       path: `("" "t" ,table "read")
                                       query: `((limit . ,limit)
                                                (include_count
                                                 . ,(boolean->string include-count))
                                                (KEY . ,(factual-key))
                                                (offset . ,offset))))
             #f
             (lambda ()
               (let ((data (read-json)))
                 (let*-values (((response headers)
                                (alist-partition/key 'response data))
                               ((data metadata)
                                (alist-partition/key 'data response)))
                   (cons (vector-map (lambda (i datum) (alist->factual-datum datum)) data)
                         (append headers metadata))))))))
        (values (car data-metadata) (cdr data-metadata))))
    
    (define (factual-total-row-count)
      (let-values (((data metadata) (factual-read limit: 1
                                                  include-count: #t)))
        (alist-ref 'total_row_count metadata)))
    
    (define (factual-random-data #!key
                                 (limit 10)
                                 (max-offset 500))
      (let* ((total-row-count (factual-total-row-count))
             (offset (random (- (min total-row-count max-offset) limit))))
        (let-values (((data metadata) (factual-read offset: offset
                                                    limit: limit)))
          data)))
    
    (define (with-factual-key key thunk)
      (parameterize ((factual-key key)) (thunk)))
    
    (with-factual-key
     my-factual-key
     (lambda ()
       (debug (factual-random-data max-offset: 50))))
    
  #+END_SRC
